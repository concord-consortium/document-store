.row.login-error{style: "display: none;"}
  .small-12.text-center.columns{style: "color: #990000" }
    There was a problem setting up this interactive. Please try refreshing your page.
-if @master_document_url
  - if @supplemental_documents && @supplemental_documents.size > 0
    .row
      .small-12.text-center.columns
        - most_recent = @supplemental_documents.sort_by{|d| d.updated_at }.last
        = link_to h(@buttonText), codap_link(@codap_server, most_recent), class: :"launch-button", target: "_blank"
    .row.more-space-above
      .small-12.text-center.columns
        = link_to 'Reset to Original', @master_document_url, class: :"original-reset", target: "_blank"
  - else
    .row
      .small-12.text-center.columns.end
        = link_to h(@buttonText), @master_document_url, class: :"launch-button", target: "_blank"
- else
  .row
    .small-12.text-center.columns{style: "color: #990000" }
      Error: The requested document could not be found.
:javascript
  $(document).ready(function() {
    // Hide the launch buttons until we talk with LARA
    $('.launch-button, .original-reset').hide();
    // But show them after a while, just in case
    var showTimeoutId = setTimeout(function() {
      $('.launch-button, .original-reset').show();
    }, 10000);

    var runKey = '#{@runKey}',
        reportingUrl = '#{@report_url}',
        learnerUrl = '#{@learner_url}',
        areLoggedIn = #{!current_user.nil?},
        currentEmail = #{current_user.nil? ? "null" : "'#{current_user.email}'"};

    var phone = iframePhone.getIFrameEndpoint(),
        learnerUrlSet = false,
        state = {runKey: runKey, lara_options: { reporting_url:  reportingUrl }};

    phone.addListener('authInfo', function(info) {
      clearTimeout(showTimeoutId); // We're communicating fine, so don't automatically show the launch buttons
      if (!info["loggedIn"]) {
        // We're not supposed to be logged in.
        if (areLoggedIn) {
          // But... we are.
          if (window.location.href.indexOf('require_anonymous=') == -1) {
            // Log the current user out
            window.location = $.param.querystring(window.location.href, "require_anonymous=true");
            return;
          } else {
            $('.login-error').show();
            return;
          }
        } else {
          // And we're not logged in. Good!
          // Tell CODAP that we're running anonymously
          $('.launch-button,.original-reset').each(function() {
            var origHref = $(this).attr('href');
            $(this).attr('href', $.param.querystring(origHref, 'runAsGuest=true'));
          });
        }
      } else {
        // We're supposed to be logged in.
        if (!areLoggedIn) {
          // But... we aren't.
          if(window.location.href.indexOf('auth_provider=') == -1) {
            // Try to log a user in.
            window.location = $.param.querystring(window.location.href, { require_email: info["email"], auth_provider: info["provider"]});
            return;
          } else {
            $('.login-error').show();
            return;
          }
        } else {
          // And we are logged in. Good!
          // Are we the right person?
          if (info["email"] && info["email"] != currentEmail) {
            // Wrong person. Try to log in again.
            if(window.location.href.indexOf('require_email=') == -1) {
              // Try to log a user in.
              window.location = $.param.querystring(window.location.href, { require_email: info["email"], auth_provider: info["provider"]});
              return;
            } else {
              $('.login-error').show();
              return;
            }
          }
        }
      }

      // if we get here, we're the correct user
      phone.addListener('getInteractiveState', function () {
        phone.post('interactiveState', 'nochange');
      });
      phone.post('setLearnerUrl', learnerUrl);
      phone.post('interactiveState', state);
      $('.launch-button,.original-reset').show();
    });
    phone.addListener('getExtendedSupport', function() {
      phone.post('extendedSupport', { reset: false });
    });
    // Initialize connection after all message listeners are added!
    phone.initialize();

    // Some initial messages we're going to *always* send
    phone.post('getAuthInfo');
  });
