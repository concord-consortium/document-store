-# If the requested document was found then this page waits for Lara to tell it the interactive run state
-# via iFramePhone.  If there are no access keys in the interactive run state then a call is made back into the
-# document store to copy the shared document and then a keys are then sent back via posted back
-# to Lara to be saved in the interactive run state.  Once all of that is done then the launch button is displayed.

.row.launch-error{style: "display: none;"}
  .small-12.text-center.columns{style: "color: #990000" }
    There was a problem setting up this interactive. Please try refreshing your page.
-if @document
  - if @document.shared
    .row
      .small-12.text-center.columns.end
        #loading-message
          %span#loading-image
            =image_tag "loading.gif"
          %span#loading-text
            Loading...
        = link_to h(@button_text), @button_url, class: :"launch-button", target: "_blank"
    #reset-row.row.more-space-above{style: "display: none;"}
      .small-12.text-center.columns
        = link_to 'Reset to Original', '#', class: :"original-reset"
      #launch-reset-message.small-12.text-center.columns{style: "display: none;"}
  -else
    .row
      .small-12.text-center.columns{style: "color: #990000" }
        Error: The requested document is not shared.
-else
  .row
    .small-12.text-center.columns{style: "color: #990000" }
      Error: The requested document could not be found.

-if @document && @document.shared
  :javascript
    $(document).ready(function() {
      if (#{@in_a_window.to_s}) {
        // Set all links to replace this page instead of opening yet another window.
        $('a').attr('target', '');
        return;
      }

      // Hide the launch buttons until we talk with LARA
      $('.launch-button, .original-reset').hide();

      // Update the loading message after 10 seconds
      var showTimeoutId = setTimeout(function() {
        $('#loading-text').html("Still loading!  You may want to reload this page to try again.")
      }, 10000);

      var resetUrlTemplate = '#{@reset_url}',
          phone = iframePhone.getIFrameEndpoint(),
          interactiveRunState, extractError, haveResetInfo, interactiveStateUrl;

      extractError = function (jqXHR) {
        var error = '', result;
        try {
          result = JSON.parse(jqXHR.responseText);
          if (result && result.errors) {
            error = result.errors.join('. ');
            if (error.length > 0) {
              error = "The error returned was: <em>" + error + "</em>";
            }
          }
        } catch (e) {}
        return error;
      };

      phone.addListener('initInteractive', function (interactiveData) {
        var launchParams = {url: interactiveData.interactiveStateUrl, source: #{@document.id}, collaboratorUrls: interactiveData.collaboratorUrls},
            launchButton = $('.launch-button'),
            linkedState = interactiveData.linkedState || {};

        clearTimeout(showTimeoutId);

        interactiveRunState = interactiveData.interactiveState || {};
        interactiveStateUrl = interactiveData.interactiveStateUrl;

        // if there is a linked state and no interactive state then change the source document to point to the linked recordid and add the access key
        if (linkedState.docStore && linkedState.docStore.recordid && linkedState.docStore.accessKeys && linkedState.docStore.accessKeys.readOnly && !(interactiveRunState && interactiveRunState.docStore && interactiveRunState.docStore.recordid)) {
          launchParams.source = linkedState.docStore.recordid;
          launchParams.readOnlyKey = linkedState.docStore.accessKeys.readOnly;
        }

        // update the launch button to add the interactive run state api url
        launchButton.each(function () {
          var $this = $(this),
              launchUrl = $this.attr('href');
          $this.attr('href', $.param.querystring(launchUrl, {launchFromLara: Base64.encode(JSON.stringify(launchParams))}));
        });

        // only show the reset button when the learner has a document or when the launch button is clicked
        if (interactiveRunState.docStore) {
          $('#reset-row').show();
        }
        else {
          launchButton.click(function () {
            $('#reset-row').show();
          });
        }

        phone.addListener('getInteractiveState', function () {
          phone.post('interactiveState', 'nochange');
        });

        $('#loading-message').hide();
        $('.launch-button,.original-reset').show();
      });

      phone.addListener('getExtendedSupport', function() {
        phone.post('extendedSupport', { reset: false });
      });

      haveResetInfo = function () {
        return interactiveRunState.docStore && interactiveRunState.docStore.recordid && interactiveRunState.docStore.accessKeys && interactiveRunState.docStore.accessKeys.readWrite;
      };

      resetDocument = function (resetMessage) {
        var resetUrl = resetUrlTemplate.replace('RESET_ID', interactiveRunState.docStore.recordid).replace('ACCESS_KEY', interactiveRunState.docStore.accessKeys.readWrite);

        resetMessage.html('Resetting your activity...').show();

        $.ajax({
          url: resetUrl,
          type: 'PUT'
        }).done(function() {
          resetMessage.html('Your activity data has been reset.');
        })
        .fail(function(jqXHR) {
          resetMessage.html('Sorry, there was an error resetting your activity data. ' + extractError(jqXHR));
        });
      };

      $(".original-reset").click(function () {
        var resetMessage = $('#launch-reset-message');

        resetMessage.show();

        if (haveResetInfo()) {
          resetDocument(resetMessage);
        }
        else {
          resetMessage.html("Checking for activity data...");

          $.ajax({
            url: interactiveStateUrl,
            type: 'GET',
            crossDomain: true,
            xhrFields: {
               withCredentials: true
            }
          })
          .done(function (interactiveState) {
            interactiveRunState = {};
            try {
              interactiveRunState = JSON.parse(interactiveState.raw_data);
            }
            catch (e) {}
            if (interactiveState.success === false) {
              resetMessage.html("Sorry, there was an error checking your activity data.  The error returned was: <em>" + interactiveState.message + "</em>")
            }
            else if (haveResetInfo()) {
              resetDocument(resetMessage);
            }
            else {
              resetMessage.html("Your activity data has not been created yet so it can't be reset. Try again once you have clicked the <strong>#{@button_text}</strong> button above and have saved activity data.");
            }
          })
          .fail(function(jqXHR) {
            resetMessage.html('Sorry, there was an error resetting your activity data. ' + extractError(jqXHR));
          });
        }

        return false;
      });

      // TODO: there seems to be a race condition between when the page loads and when initialize can be called
      setTimeout(function () {
        // Initialize connection after all message listeners are added!
        phone.initialize();
      }, 1000);
    });
