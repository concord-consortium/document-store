.row.launch-error{style: "display: none;"}
  .small-12.text-center.columns{style: "color: #990000" }
    There was a problem setting up this interactive. Please try refreshing your page.
-if @document
  - if @document.shared
    .row
      .small-12.text-center.columns.end
        #loading-message
          %span#loading-image
            =image_tag "loading.gif"
          %span#loading-text
            Loading...
    %iframe#autolaunch_iframe

  -else
    .row
      .small-12.text-center.columns{style: "color: #990000" }
        Error: The requested document is not shared.
-else
  .row
    .small-12.text-center.columns{style: "color: #990000" }
      Error: The requested document could not be found.

-if @document && @document.shared
  :javascript
    $(document).ready(function() {
      // Update the loading message after 10 seconds
      var showTimeoutId = setTimeout(function() {
        $('#loading-text').html("Still loading!  You may want to reload this page to try again.")
      }, 10000);

      var phone = iframePhone.getIFrameEndpoint();
      var interactiveRunState, interactiveStateUrl;

      phone.addListener('initInteractive', function (interactiveData) {
        var launchParams = {url: interactiveData.interactiveStateUrl, source: #{@document.id}, collaboratorUrls: interactiveData.collaboratorUrls};
        var launchUrl = #{@launch_url.to_json};

        clearTimeout(showTimeoutId);

        interactiveRunState = interactiveData.interactiveState || {};
        interactiveStateUrl = interactiveData.interactiveStateUrl;

        var interactiveStateAvailable = interactiveRunState && interactiveRunState.docStore && interactiveRunState.docStore.recordid
        // Use most recent linked state.
        var linkedStateMetadata = interactiveData.allLinkedStates.slice().sort(function (a, b) {
          return new Date(b.updatedAt) - new Date(a.updatedAt)
        })[0];
        var linkedState = linkedStateMetadata && linkedStateMetadata.data ? linkedStateMetadata.data : null;

        if (linkedState && new Date(linkedStateMetadata.updatedAt) > new Date(interactiveData.interactiveStateUpdatedAt)) {
          var shouldUseMostRecent = window.confirm(
            "A previous version contains more recent data. " +
            "Would you like to use this version instead?\n" +
            "Previous version: " + new Date(linkedStateMetadata.updatedAt).toLocaleString() + "\n" +
            "Current version: " + new Date(interactiveData.interactiveStateUpdatedAt).toLocaleString()
          )
          if (shouldUseMostRecent) {
            // Remove existing interactive state, so the interactive will be initialized from the linked state.
            phone.post('interactiveState', null);
            interactiveStateAvailable = false;
          } else {
            // Update current state timestamp, so it will be considered to be the most recent one.
            phone.post('interactiveState', 'touch');
          }
        }

        // if there is a linked state and no interactive state then change the source document to point to the linked recordid and add the access key
        if (linkedState && linkedState.docStore && linkedState.docStore.recordid && linkedState.docStore.accessKeys && linkedState.docStore.accessKeys.readOnly && !interactiveStateAvailable) {
          launchParams.source = linkedState.docStore.recordid;
          launchParams.readOnlyKey = linkedState.docStore.accessKeys.readOnly;
        }

        // Interactive state saves are supported by autolaunch currently only when the app iframed by autolaunch uses
        // the Cloud File Manager (CFM).  The CFM in the iframed app handles all the state saving -- Lara only ever
        // receives 'nochange' as the state.
        //
        // 1. Autolaunch informs Lara that interactive state is supported using the supportedFeatures message
        // 2. Once the iframed app loads autolaunch sends a cfm::getCommands message to the iframed app and sets a
        //    iframeCanAutosave flag when a cfm::commands is received from the iframed app and the app supports cfm::autosave
        // 3. When autolaunch gets an getInteractiveState request from Lara it either
        //    a. immedatiely returns 'nochange' to Lara when the iframeCanAutosave flag isn't set
        //    b. sends a 'cfm::autosave' message to the app and then sends 'nochange' when the app returns 'cfm::autosaved'

        phone.post('supportedFeatures', {
          apiVersion: 1,
          features: {
            interactiveState: true
          }
        });

        var iframeCanAutosave = false;
        var iframeLoaded = function () {
          $(window).on('message', function (e) {
            var data = e.originalEvent.data
            if (data) {
              switch (data.type) {
                case 'cfm::commands':
                  iframeCanAutosave = data.commands && data.commands.indexOf('cfm::autosave') !== -1;
                  break;
                case 'cfm::autosaved':
                  phone.post('interactiveState', data.saved ? 'touch' : 'nochange');
                  break;
              }
            }
          })
          iframe.postMessage({type: 'cfm::getCommands'}, '*')
        };

        phone.addListener('getInteractiveState', function () {
          if (iframeCanAutosave) {
            iframe.postMessage({type: 'cfm::autosave'}, '*');
          }
          else {
            phone.post('interactiveState', 'nochange');
          }
        });

        var src = $.param.querystring(launchUrl, {launchFromLara: Base64.encode(JSON.stringify(launchParams))});
        var iframe = $("#autolaunch_iframe").on('load', iframeLoaded).attr("src", src).show()[0].contentWindow;
      });

      phone.addListener('getExtendedSupport', function() {
        phone.post('extendedSupport', { reset: false });
      });

      // TODO: there seems to be a race condition between when the page loads and when initialize can be called
      setTimeout(function () {
        // Initialize connection after all message listeners are added!
        phone.initialize();
      }, 1000);
    });
